import requests

class ServerInfoScanner:
    def __init__(self, target_url):
        self.target_url = target_url
        
    def scan(self):
        """Sunucu bilgi sızıntısını kontrol eder"""
        result = {
            "title": "Sunucu Bilgi Sızıntısı Testi",
            "findings": []
        }
        
        try:
            response = requests.get(self.target_url, timeout=10, verify=False)
            headers = response.headers
            
            # Server başlığı kontrolü
            if 'Server' in headers:
                server_info = headers['Server']
                result["findings"].append({
                    "name": "Server Başlığı Açığa Çıkması",
                    "description": f"Sunucu, 'Server' başlığı ile bilgi sızdırıyor: {server_info}",
                    "risk_level": "Orta",
                    "impact": "Saldırganlar, sunucu yazılımı ve sürümünü öğrenerek hedefli saldırılar yapabilir",
                    "recommendation": "Server başlığını gizleyin veya içeriğini değiştirin"
                })
                
            # X-Powered-By başlığı kontrolü
            if 'X-Powered-By' in headers:
                powered_by = headers['X-Powered-By']
                result["findings"].append({
                    "name": "X-Powered-By Başlığı Açığa Çıkması",
                    "description": f"Sunucu, 'X-Powered-By' başlığı ile teknoloji bilgisi sızdırıyor: {powered_by}",
                    "risk_level": "Orta",
                    "impact": "Saldırganlar, kullanılan teknolojileri öğrenerek hedefli saldırılar yapabilir",
                    "recommendation": "X-Powered-By başlığını gizleyin veya devre dışı bırakın"
                })
                
            # X-AspNet-Version başlığı kontrolü
            if 'X-AspNet-Version' in headers:
                aspnet_version = headers['X-AspNet-Version']
                result["findings"].append({
                    "name": "X-AspNet-Version Başlığı Açığa Çıkması",
                    "description": f"Sunucu, ASP.NET sürümünü açığa çıkarıyor: {aspnet_version}",
                    "risk_level": "Orta",
                    "impact": "Saldırganlar, ASP.NET sürümüne özgü güvenlik açıklarını hedefleyebilir",
                    "recommendation": "X-AspNet-Version başlığını devre dışı bırakın"
                })
                
            # X-Generator başlığı kontrolü
            if 'X-Generator' in headers:
                generator = headers['X-Generator']
                result["findings"].append({
                    "name": "X-Generator Başlığı Açığa Çıkması",
                    "description": f"Sunucu, site oluşturucu bilgisini açığa çıkarıyor: {generator}",
                    "risk_level": "Düşük",
                    "impact": "Saldırganlar, kullanılan CMS veya site oluşturucuyu öğrenebilir",
                    "recommendation": "X-Generator başlığını devre dışı bırakın"
                })
            
            # HTML içerisinde sürüm bilgisi kontrolü
            if response.text:
                # Meta generator etiketi
                from bs4 import BeautifulSoup
                soup = BeautifulSoup(response.text, 'html.parser')
                
                # HTML yorumlarındaki sürüm bilgileri
                html_comments = soup.find_all(string=lambda text: isinstance(text, str) and '<!--' in text)
                version_keywords = ['version', 'sürüm', 'release', 'build', 'generated by', 'powered by']
                
                for comment in html_comments:
                    for keyword in version_keywords:
                        if keyword in comment.lower():
                            result["findings"].append({
                                "name": "HTML Yorumlarında Sürüm Bilgisi",
                                "description": f"HTML içinde sürüm bilgisi içeren yorum tespit edildi",
                                "risk_level": "Düşük",
                                "impact": "Saldırganlar, uygulama hakkında detaylı bilgi edinebilir",
                                "recommendation": "HTML yorumlarından sürüm ve teknoloji bilgilerini kaldırın"
                            })
                            break
                
                # Meta generator etiketi
                meta_generator = soup.find('meta', {'name': 'generator'})
                if meta_generator and meta_generator.get('content'):
                    result["findings"].append({
                        "name": "Meta Generator Etiketi",
                        "description": f"Site generator bilgisi meta etiketiyle açığa çıkıyor: {meta_generator.get('content')}",
                        "risk_level": "Düşük",
                        "impact": "Saldırganlar, kullanılan CMS veya geliştirme platformunu öğrenebilir",
                        "recommendation": "Meta generator etiketini kaldırın veya içeriğini değiştirin"
                    })
                
        except requests.exceptions.RequestException as e:
            result["findings"].append({
                "name": "Sunucu Bilgi Kontrol Hatası",
                "description": f"Sunucu bilgi kontrolü sırasında hata oluştu: {str(e)}",
                "risk_level": "Düşük",
                "impact": "Sunucu bilgi sızıntısı taraması tamamlanamadı",
                "recommendation": "Sunucu erişilebilirliğini kontrol edin ve taramayı tekrarlayın"
            })
        
        if not result["findings"]:
            result["findings"].append({
                "name": "Sunucu Bilgi Sızıntısı",
                "description": "Sunucuda bilgi sızıntısı tespit edilmedi",
                "risk_level": "Düşük",
                "impact": "Herhangi bir sorun tespit edilmedi",
                "recommendation": "Bilgi sızıntısını önlemeye devam edin"
            })
            
        return result 